prototype 属性使您有能力向对象添加属性和方法
ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让原型对象的写法更加清晰、更像面向对象编程的语法而已。
prototype 作用：
		解决构造函数的对象实例之间无法共享属性的缺点
		js中每个数据类型都是对象（除了null和undefined），而每个对象都继承自另外一个对象，后者称为“原型”（prototype）对象，只有null除外，它没有自己的原型对象。
		原型对象上的所有属性和方法，都会被对象实例所共享
		通过构造函数生成对象实例时，会将对象实例的原型指向构造函数的prototype属性
		每一个构造函数都有一个prototype属性，这个属性就是对象实例的原型对象
		
		
对于构造函数来说，prototype是作为构造函数的属性；对于对象实例来说，prototype是对象实例的原型对象。所以prototype即是属性，又是对象。

原型对象的属性不是对象实例的属性。对象实例的属性是继承构造函数定义的属性，因为构造函数内部有一个this关键字来指向将要生成的对象实例。
对象实例的属性，其实就是构造函数内部定义的属性。只要修改原型对象上的属性和方法，变动就会立刻体现在所有对象实例上。

原型对象的作用，就是定义所有对象实例所共享的属性和方法。

prototype，对于构造函数来说，它是一个属性；对于对象实例来说，它是一个原型对象。


对象的属性和方法，有可能是定义在自身，也有可能是定义在它的原型对象。
由于原型对象本身对于对象实例来说也是对象，它也有自己的原型，所以形成了一条原型链（prototype chain）。
比如，a对象是b对象的原型，b对象是c对象的原型，以此类推。
所有一切的对象的原型顶端，都是Object.prototype，即Object构造函数的prototype属性指向的那个对象。


constructor属性：默认指向prototype对象所在的构造函数
注意：prototype是构造函数的属性，而constructor则是构造函数的prototype属性所指向的那个对象，也就是原型对象的属性

constructor丁弟在原型对象上面，意味着可以被所有实例对象继承

constructor 作用：
	分辨原型对象到底属于那个构造函数
	从实例创建另一个实例